---
# --------------------( LICENSE                            )--------------------
# Copyright (c) 2023-2025 Alexis Pietak & Cecil Curry.
# See "LICENSE" for further details.
#
# --------------------( SYNOPSIS                           )--------------------
# GitHub-specific continuous integration (CI) configuration, enabling the usual
# GitHub Actions workflow for pure-Python packages exercised by "pytest".
#
# --------------------( SEE ALSO                           )--------------------
# * https://hynek.me/articles/python-github-actions
#   Well-authored blog post strongly inspiring this configuration.

# ....................{ TODO                               }....................
#FIXME: [CACHING] Add support for caching "pip" downloads across runs.
#Currently, unresolved issues in GitHub Actions prevents sane caching of "pip"
#downloads. Naturally, horrifying hacks circumventing these issues do exist but
#are presumably worse than these issues. See also this pertinent comment:
#    https://github.com/actions/cache/issues/342#issuecomment-673371329
#FIXME: [CACHING] Huzzah! The "setup-python" action itself now supports
#out-of-the-box caching. Note that doing so will require a minor of
#configuration on our part -- but nothing *TOO* tremendous, hopefully. See:
#    https://github.com/actions/setup-python#caching-packages-dependencies

# ....................{ METADATA                           }....................
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# WARNING: Changes to this name *MUST* be manually synchronized with:
# * The "|GitHub Actions badge|" image URL in our top-level "README.rst".
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# Non-human-readable (i.e., machine-readable) label associated with this
# GitHub Actions workflow.
name: test

# ....................{ TRIGGER                            }....................
# Confine testing to only...
#
# Note that "**" matches all (possibly deeply "/"-nested) branches. See also:
# * https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#filter-pattern-cheat-sheet
#   GitHub-specific glob syntax for matching branches and tags below.
on:
  # Pushes to the main branch. Pushes to other branches are assumed to be
  # developer-specific and thus already tested locally by that developer.
  push:
    branches:
      - main
  # Pull requests against the main branch. Pull requests against other branches
  # should, ideally, *NEVER* occur; if and when they do, we ignore them.
  pull_request:
    branches:
      - main  # '**'

# ....................{ VARIABLES                          }....................
# List of private environment variables specific to this configuration and
# globally set for *ALL* jobs declared below. To avoid conflict with
# third-party processes, prefix the name of each variable by "_".
env:
  #!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  # CAUTION: Optional in-flight test-time dependencies (e.g., NumPy, mypy) are
  # intentionally listed in the "test" key of the
  # "[project.optional-dependencies]" section of the top-level "pyproject.toml"
  # file rather than below. "tox" isolates both the package being tested and its
  # dependency tree to virtual environments. Listing in-flight dependencies
  # here would install those dependencies outside those virtual environments,
  # thus reducing to a pointless, expensive, and failure-prone noop.
  #!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  # Whitespace-delimited list of the names of all Python packages to be
  # installed by "pip" below. Although this package has *NO* mandatory runtime
  # dependencies, fully exercising all tests necessitates these pre-flight
  # test-time dependencies. These include:
  # * "tox", the only mandatory test-time dependency.
  _PIP_PACKAGE_NAMES: |
    tox

  # Whitespace-delimited list of the names of all Debian-based non-Pythonic
  # mandatory dependencies to be installed by APT below. These include:
  # * GraphViz, a mandatory C-based dependency of the "pygraphviz" Python
  #   package required as a mandatory runtime dependency of this package.
  _APT_PACKAGE_NAMES: |
    graphviz
    graphviz-dev

# ....................{ MAIN                               }....................
jobs:
  # ...................{ TESTS                              }...................
  # Job iteratively exercising our test suite against all Python interpreters
  # supported by this package (and also measuring the coverage of that suite).
  tests:
    # ..................{ MATRIX                             }..................
    strategy:
      matrix:
        # List of all platform-specific Docker images to test against,
        # including:
        # * The latest Long-Term Service (LTS) release of Ubuntu Linux, still
        #   the most popular Linux distro and thus a sane baseline.
        # * The latest *whatever* release of Microsoft Windows. Although Linux
        #   and macOS are both POSIX-compliant and thus crudely comparable from
        #   the low-level CLI perspective, Windows is POSIX-noncompliant and
        #   thus heavily divergent from both macOS and Linux.
        # * The latest *whatever* release of Apple macOS. We don't particularly
        #   need to exercise tests on macOS, given the platform's patent
        #   POSIX-compliant low-level similarities to Linux, but... what the
        #   heck. Why not? Since this is the lowest priority, we defer macOS
        #   testing until last.
        #
        # To reduce unnecessary consumption of scarce continuous integration
        # (CI) minutes, we currently only test against our principal
        # development platform known to behave sanely: yup, it's Linux.

        #FIXME: Reenable macOS and Windows support *AFTER* we go public. For
        #now, testing on Linux suffices. *sigh*
        # platform: [ubuntu-latest, windows-latest, macos-latest]
        platform: [ubuntu-latest]

        #!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
        # WARNING: Changes to this section *MUST* be manually synchronized with:
        # * The "envlist" setting of the "[tox]" subsection in "tox.ini".
        # * The "include" setting below.
        #!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

        # List of all "tox" environments (defined by the "envlist" setting of
        # the "[tox]" subsection in "tox.ini") to be tested, which the
        # ${TOXENV} environment variable declared below exposes to "tox".
        tox-env:
          #FIXME: Uncomment if we decide we care about older CPython versions.
          # - py39-coverage
          # - py310-coverage
          # - py311-coverage
          # - py312-coverage
          - py313-coverage
          #FIXME: Uncomment after we resolve tests currently broken under *ANY*
          #PyPy version. All tests used to pass under PyPy 3.7 and 3.8, but were
          #recently broken by work generalizing @beartype to decorate builtin
          #method descriptors (e.g., @property, @classmethod, @staticmethod).
          # - pypy37-coverage
          # - pypy38-coverage
          # - pypy39-coverage

        # Avoid problematic combinations of Python versions and platforms.
        exclude:
          # Avoid Python 3.13 under Windows. Why? For unknown reasons, the
          # GitHub Actions-based Windows runner appears to ship a GIL-free
          # "free-threading" build of Python 3.13.0, which then appears to
          # produce cataclysmic failures at "pytest" test collection time.
          #
          # See also this currently open upstream CPython issue:
          #     https://github.com/python/cpython/issues/118973
          - platform: windows-latest
            tox-env: py313-coverage

        # Map each "tox" environment name listed in the "tox-env" list above to
        # the corresponding "python-version" string supported by the
        # "actions/setup-python" GitHub Action run below.
        #
        # Note that:
        # * Python version specifiers *MUST* be quoted: e.g.,
        #     # Do this.
        #     python-version: "3.10"
        #     # Do *NOT* do this.
        #     python-version: 3.10
        #   Why? Because YAML sensibly treats an unquoted literal satisfying
        #   floating-point syntax as a floating-point number and thus silently
        #   truncates *ALL* ignorable zeroes suffixing that number (e.g.,
        #   truncating 3.10 to 3.1). That then results in non-human-readable CI
        #   errors, as discussed upstream at:
        #     https://github.com/actions/setup-python/issues/160#issuecomment-724485470
        # * Python pre-releases may be selected with a space-delimited range
        #   embedded in a single quoted version specifier. For example,
        #   selecting the Python 3.11 pre-release reduces to:
        #     python-version: "3.11.0-alpha - 3.11.0"
        include:
          #FIXME: Uncomment if we decide we care about older CPython versions.
          # - tox-env: py39-coverage
          #   python-version: "3.9"
          # - tox-env: py310-coverage
          #   python-version: "3.10"
          # - tox-env: py311-coverage
          #   python-version: "3.11"
          # - tox-env: py312-coverage
          #   python-version: "3.12"
          - tox-env: py313-coverage
            python-version: "3.13"
          # - tox-env: py314-coverage
          #   python-version: "3.14"
          #FIXME: Uncomment if and when we ever care about PyPy again. *shrug*
          # - tox-env: pypy310-coverage
          #   python-version: "pypy-3.10"

    # ..................{ SETTINGS                           }..................
    # Arbitrary human-readable description.
    name: "[${{ matrix.platform }}] Python ${{ matrix.python-version }} CI"

    # Name of the current Docker image to run tests under.
    runs-on: "${{ matrix.platform }}"

    # Time in minutes to wait on the command pipeline run below to exit
    # *BEFORE* sending a non-graceful termination request (i.e., "SIGTERM"
    # under POSIX-compliant systems).
    timeout-minutes: 20

    # ..................{ VARIABLES                          }..................
    # External shell environment variables exposed to commands run below.
    env:
      # .................{ VARIABLES ~ pip                    }.................
      # Prevent "pip" from wasting precious continuous integration (CI) minutes
      # deciding whether it should be upgrading. We're *NOT* upgrading you,
      # "pip". Accept this and let us test faster.
      PIP_NO_PIP_VERSION_CHECK: 1

      # Instruct "pip" to prefer binary wheels to source tarballs, reducing
      # installation time *AND* improving installation portability.
      PIP_PREFER_BINARY: 1

      # .................{ VARIABLES ~ python                 }.................
      # Enable the Python fault handler, emitting a detailed traceback on
      # segmentation faults. By default, Python simply emits the fault itself.
      # Most devs regard this as yet another Python shell variable that should
      # have been enabled by default. We are one such dev.
      PYTHONFAULTHANDLER: 1

      # Prevent Python from buffering and hence failing to log output in the
      # unlikely (but feasible) event of catastrophic failure from either the
      # active Python process or OS kernel.
      PYTHONUNBUFFERED: 1

      # .................{ VARIABLES ~ tox                    }.................
      # Map from the current item of the "tox-env" list defined above to the
      # ${TOXENV} environment variable recognized by "tox".
      TOXENV: "${{ matrix.tox-env }}"

    # ..................{ PROCESS                            }..................
    steps:
      # ..................{ SETUP                            }..................
      - name: 'Checking out repository...'
        uses: 'actions/checkout@v4'
      - name: "Installing Python ${{ matrix.python-version }}..."
        uses: 'actions/setup-python@v5'
        with:
          python-version: "${{ matrix.python-version }}"
      - name: 'Displaying Python metadata...'
        run: |
          python3 -VV
          python3 -m site

      # ..................{ INSTALL                          }..................
      #FIXME: Preserved for posterity. Useful for private repos, but not
      #particularly desirable for public repos due to the complexity increase.
      # # Restore the prior Python tree from the most recent run, including both
      # # this package and *ALL* dependencies of this package previously
      # # installed to this tree. See also this well-written Medium post:
      # #     https://medium.com/ai2-blog/python-caching-in-github-actions-e9452698e98d
      # - name: 'Restoring Python tree...'
      #   uses: 'actions/cache@v3'
      #   with:
      #     # Newline-delimited list of the absolute dirnames of all directories
      #     # to be cached, including:
      #     # * "${{ env.pythonLocation }}", the dirname of the directory to
      #     #   which the previously run "setup-python" action installed the
      #     #   requested Python version.
      #     path: "${{ env.pythonLocation }}"
      #     # Arbitrary string identifying the previously cached subdirectory
      #     # with which this path will be pre-populated, selected so as to force
      #     # cache misses on both Python version updates *AND* changes to the
      #     # dependency list required by this package.
      #     key: "python-${{ env.pythonLocation }}-${{ hashFiles('cellnition/meta.py') }}"
      #     # Note that the "restore-keys:" setting is intentionally left
      #     # undefined. Why? Because defining that setting would erroneously
      #     # prepopulate "${{ env.pythonLocation }}" with the contents of a
      #     # previously installed Python version on Python version updates.

      # Note that:
      # * We intentionally update APT *BEFORE* all remaining dependencies, as
      #   the latter requires the package cache created by the former. If
      #   omitted, the first such attempt fails with a fatal error resembling:
      #     $ sudo apt-get install -y graphviz
      #     Reading package lists...
      #     Building dependency tree...
      #     Reading state information...
      #     E: Unable to locate package graphviz
      #
      # Note that we intentionally prefer the antiquated "apt-get" command to
      # the modern "apt" command, as the latter complains about an unstable
      # command-line API:
      #     WARNING: apt does not have a stable CLI interface. Use with caution in scripts.
      - name: 'Upgrading system packager dependencies...'
        run: |
          sudo apt-get update --quiet --quiet --yes
      - name: 'Installing system package dependencies...'
        run: |
          sudo apt-get install --quiet --quiet --yes ${_APT_PACKAGE_NAMES}

      # Note that:
      # * This command *MUST* be platform-agnostic by running under both:
      #   * POSIX-compliant platforms (e.g., Linux, macOS).
      #   * POSIX-noncompliant platforms (e.g., Windows).
      #   In particular, commands that assume a POSIX-compliant shell (e.g.,
      #   Bash) *MUST* be avoided.
      # * Packaging dependencies (e.g., "pip") are upgraded *BEFORE* all
      #   remaining dependencies (e.g., "tox").
      - name: 'Upgrading packager dependencies...'
        run: |
          python3 -m pip --quiet install --upgrade pip hatch wheel
      - name: 'Installing package dependencies...'
        run: |
          python3 -m pip --quiet install --upgrade ${{ env._PIP_PACKAGE_NAMES }}

      # ..................{ TEST                             }..................
      - name: 'Testing package with "tox"...'
        # Run the subsequent script as a Bash script. Although POSIX-compliant
        # platforms (e.g., Linux, macOS) sensibly default to Bash, Windows
        # insanely defaults to a Windows-specific shell (e.g., PowerShell).
        shell: bash
        run: |
          # If the current platform is macOS, export a "tox"-specific
          # environment variable circumventing "pip" installation issues by
          # instructing "tox" to reinstall already installed Python packages.
          # By default, "tox" avoids doing so for efficiency. This is required
          # to specifically circumvent installation of NumPy under macOS. As
          # discussed at numpy/numpy#15947, macOS bundles a patently broken
          # BLAS replacement called "Accelerate" causing NumPy to raise
          # exceptions on importation resembling:
          #     RuntimeError: Polyfit sanity test emitted a warning, most
          #     likely due to using a buggy Accelerate backend. If you compiled
          #     yourself, more information is available at
          #     https://numpy.org/doc/stable/user/building.html#accelerated-blas-lapack-libraries
          #     Otherwise report this to the vendor that provided NumPy.
          #     RankWarning: Polyfit may be poorly conditioned
          #
          # The kludge leveraged here is the canonical solution. See also:
          #     https://github.com/numpy/numpy/issues/15947#issuecomment-745428684
          #
          # Ideally, we would instead isolate setting this environment variable
          # in a prior step with sane GitHub Actions syntax: e.g.,
          #     if: ${{ matrix.platform }} == 'macos-latest'
          #     env:
          #       _TOX_PIP_INSTALL_OPTIONS: '--force-reinstall'
          #
          # Sadly, the "env:" map only locally exports the environment
          # variables it declares to the current step. Thanks, GitHub Actions.
          if [[ ${{ matrix.platform }} == 'macos-latest' ]]; then
              export _TOX_PIP_INSTALL_OPTIONS='--force-reinstall'
              echo "Massaging macOS dependencies with \"pip install ${_TOX_PIP_INSTALL_OPTIONS}\"..."
          fi
          # Dismantled, this is:
          # * "--skip-missing-interpreters=false" disables the corresponding
          #   "skip_missing_interpreters = true" setting globally enabled by
          #   our top-level "tox.ini" configuration, forcing CI failures for
          #   unavailable Python environments. See also:
          #       https://github.com/tox-dev/tox/issues/903
          python3 -m tox --skip-missing-interpreters=false

      #FIXME: Preserved for posterity. Useful for private repos, but not
      #particularly desirable for public repos where "tox" is preferable.
      # - name: 'Installing Python package dependencies...'
      #   run: |
      #     # Note that we intentionally avoid passing:
      #     # * "sudo", as the "python" command in the current $PATH differs
      #     #   *SUBSTANTIALLY* between the superuser and non-superuser. For
      #     #   example, as of 2022 Q2, the "python" command:
      #     #   * For the non-superuser is Python 3.9.10.
      #     #   * For the superuser is.... Python 3.8.10. Yikes.
      #     # * "--quiet", as doing so uselessly squelches both ignorable
      #     #   informational messages *AND* unignorable errors and warnings.
      #     # * "--upgrade-strategy eager", forcing "pip" to upgrade *ALL*
      #     #   package dependencies to their newest releases regardless of
      #     #   whether the Python installation provided by this Docker image
      #     #   already provides older releases of the same dependencies that
      #     #   technically satisfy package requirements. Although ideal, doing
      #     #   so consumes excess CI minutes with little short-term benefit.
      #     python -m pip install --upgrade --editable .[test]
      # # Note that this workflow intentionally tests with the lower-level
      # # "pytest" rather than the higher-level "tox" test suite runner. Why?
      # # Space and time efficiency. Whereas "pytest" tests only execution of
      # # this package, "tox" tests both installation *AND* execution of this
      # # package and is thus preferable. Sadly, "tox" also interacts poorly with
      # # the "pip" cache established above. Even were this *NOT* the case, "tox"
      # # isolates this package to a private virtual environment and thus incurs
      # # substantially higher costs than "pytest". *sigh*
      # - name: 'Testing package...'
      #   run: |
      #     # Dismantled, this is:
      #     # * "--maxfail=1", halting testing on the first test failure.
      #     #   Permitting multiple consecutive test failures:
      #     #   * Complicates failure output, especially when every failure
      #     #     following the first is a result of the same underlying issue.
      #     #   * Consumes scarce CI minutes that we do *NOT* have to spare.
      #     # * "-X dev", enabling the Python Development Mode (PDM), which:
      #     #       "Introduces additional runtime checks that are too expensive
      #     #       to be enabled by default. It should not be more verbose than
      #     #       the default if the code is correct; new warnings are only
      #     #       emitted when an issue is detected."
      #     #   Specifically, the PDM enables:
      #     #   * "-W default", emitting warnings ignored by default. Yes, Python
      #     #     insanely ignores various categories of warnings by default --
      #     #     including deprecating warnings, which *ABSOLUTELY* should be
      #     #     emitted by default, but aren't. We can't resolve that for end
      #     #     users but we can resolve that for ourselves.
      #     #   * "PYTHONMALLOC=debug", registering memory allocators hooks
      #     #     detecting unsafe call stack, memory, and GIL violations.
      #     #   * "PYTHONFAULTHANDLER=1", registering fault handlers emitting
      #     #     Python tracebacks on segmentation faults.
      #     #   * "PYTHONASYNCIODEBUG=1", enabling asyncio debug mode logging
      #     #     unawaited coroutines.
      #     #   * Detections for unsafe string encoding and decoding operations.
      #     #   * Logging io.IOBase.close() exceptions on object finalization.
      #     #   * Enabling the "dev_mode" attribute of "sys.flags".
      #     #
      #     #   Note that we intentionally avoid globally enabling the PDM (e.g.,
      #     #   with "PYTHONDEVMODE: 1" above), as doing so could have unintended
      #     #   consequences for "pip". See also:
      #     #       https://docs.python.org/3/library/devmode.html
      #     python -X dev -m pytest --maxfail=1

      # ..................{ COVERAGE                         }..................
      #FIXME: Uncomment if we elect to enable coverage reporting at some point.
      # - name: 'Publishing test coverage to Codecov...'
      #   uses: 'codecov/codecov-action@v4'
      #   with:
      #     name: "${{ matrix.platform }}-${{ matrix.python-version }}"
